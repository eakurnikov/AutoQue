apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply from: '../options.gradle'
apply from: '../dependencies.gradle'
apply from: '../dokka.gradle'

android {
    defaultConfig {
        applicationId "com.eakurnikov.autoque"
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        sourceSets {
            main.java.srcDirs += 'src/main/kotlin'
            main.res.srcDirs += 'src/main/res'
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            testCoverageEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled obfuscateDebugBuild.toBoolean()
            testCoverageEnabled debugTestCoverageEnabled.toBoolean()
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation project(':common')
    implementation project(':feature_autofill_api')
    implementation project(':feature_autofill_impl')

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$versions.kotlin"

    // Appcompat
    implementation "androidx.appcompat:appcompat:$versions.appcompat"
    implementation "com.google.android.material:material:$versions.androidMaterial"
    implementation "androidx.recyclerview:recyclerview:$versions.recycler"
    implementation "androidx.constraintlayout:constraintlayout:$versions.constraintLayout"

    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:$versions.lifecycle"
    implementation "androidx.lifecycle:lifecycle-common-java8:$versions.lifecycle"
    implementation "androidx.lifecycle:lifecycle-reactivestreams:$versions.lifecycle"

    // OkHttp
    implementation "com.squareup.okhttp3:okhttp:$versions.okhttp"
    implementation "com.squareup.okhttp3:logging-interceptor:$versions.okhttp"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$versions.retrofit"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$versions.retrofit"
    implementation "com.squareup.retrofit2:converter-gson:$versions.retrofit"

    // RxJava
    implementation "io.reactivex.rxjava2:rxjava:$versions.rxjava"
    implementation "io.reactivex.rxjava2:rxkotlin:$versions.rxkotlin"
    implementation "io.reactivex.rxjava2:rxandroid:$versions.rxandroid"

    // Dagger
    implementation "com.google.dagger:dagger:$versions.dagger"
    implementation "com.google.dagger:dagger-android:$versions.dagger"
    implementation "com.google.dagger:dagger-android-support:$versions.dagger"
    kapt "com.google.dagger:dagger-compiler:$versions.dagger"
    kapt "com.google.dagger:dagger-android-processor:$versions.dagger"

    // Room
    implementation "androidx.room:room-runtime:$versions.room"
    implementation "androidx.room:room-rxjava2:$versions.room"
    kapt "androidx.room:room-compiler:$versions.room"

    // Tests
    testImplementation "junit:junit:$versions.junit"
    androidTestImplementation "androidx.test:runner:$versions.testingSupportLibrary"
    androidTestImplementation "androidx.test:rules:$versions.testingSupportLibrary"
    androidTestImplementation "androidx.test.espresso:espresso-core:$versions.espresso"
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task javadocJar(type: Jar, dependsOn: dokka) {
    classifier = 'javadoc'
    from dokka.outputDirectory
}

artifacts {
    archives javadocJar
    archives sourcesJar
}